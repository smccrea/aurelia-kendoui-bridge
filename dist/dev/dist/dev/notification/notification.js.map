{"version":3,"sources":["notification/notification.js"],"names":["inject","Container","customElement","WidgetBase","generateBindables","constants","Notification","elementPrefix","Element","element","widgetBase","container","control","useElement","beforeInitialize","options","linkViewModel","useContainer","subscribe","event","callback","bind","ctx","overrideCtx","useParentCtx","attached","kNoInit","recreate","kWidget","templates","util","getChildrenVMs","length","forEach","push","type","template","destroy","detached"],"mappings":";;;;;;;;;;;;;AAAQA,Y,+BAAAA,M;AAAQC,e,+BAAAA,S;;AACRC,mB,sBAAAA,a;;AACAC,gB,qBAAAA,U;;AACAC,uB,qBAAAA,iB;;AACAC,e,oBAAAA,S;;;8BAKKC,Y,WAHZJ,cAAiBG,UAAUE,aAA3B,kB,UACAH,kBAAkB,mBAAlB,C,UACAJ,OAAOQ,OAAP,EAAgBL,UAAhB,EAA4BF,SAA5B,C;AAEC,8BAAYQ,OAAZ,EAAqBC,UAArB,EAAiCC,SAAjC,EAA4C;AAAA;;AAAA;;AAC1C,eAAKF,OAAL,GAAeA,OAAf;AACA,eAAKC,UAAL,GAAkBA,WACfE,OADe,CACP,mBADO,EAEfC,UAFe,CAEJ,KAAKJ,OAFD,EAGfK,gBAHe,CAGE;AAAA,mBAAW,MAAKA,gBAAL,CAAsBC,OAAtB,CAAX;AAAA,WAHF,EAIfC,aAJe,CAID,IAJC,EAKfC,YALe,CAKFN,SALE,CAAlB;AAMD;;+BAEDO,S,sBAAUC,K,EAAOC,Q,EAAU;AACzB,iBAAO,KAAKV,UAAL,CAAgBQ,SAAhB,CAA0BC,KAA1B,EAAiCC,QAAjC,CAAP;AACD,S;;+BAEDC,I,iBAAKC,G,EAAKC,W,EAAa;AACrB,eAAKb,UAAL,CAAgBc,YAAhB,CAA6BD,WAA7B;AACD,S;;+BAEDE,Q,uBAAW;AACT,cAAI,CAAC,KAAKC,OAAV,EAAmB;AACjB,iBAAKC,QAAL;AACD;AACF,S;;+BAEDA,Q,uBAAW;AACT,eAAKC,OAAL,GAAe,KAAKlB,UAAL,CAAgBiB,QAAhB,EAAf;AACD,S;;+BAEDb,gB,6BAAiBC,O,EAAS;AACxB,cAAIc,YAAY,KAAKnB,UAAL,CAAgBoB,IAAhB,CAAqBC,cAArB,CAAoC,KAAKtB,OAAzC,EAAqDJ,UAAUE,aAA/D,2BAAhB;AACA,cAAIsB,aAAaA,UAAUG,MAAV,GAAmB,CAApC,EAAuC;AACrCjB,oBAAQc,SAAR,GAAoB,EAApB;;AAEAA,sBAAUI,OAAV,CAAkB;AAAA,qBAAYlB,QAAQc,SAAR,CAAkBK,IAAlB,CAAuB;AACnDC,sBAAMC,UAASD,IADoC;AAEnDC,0BAAU;AAAA,yBAAMA,UAASA,QAAf;AAAA;AAFyC,eAAvB,CAAZ;AAAA,aAAlB;AAID;AACF,S;;+BAEDC,O,sBAAU;AACR,eAAK3B,UAAL,CAAgB2B,OAAhB,CAAwB,KAAKT,OAA7B;AACD,S;;+BAEDU,Q,uBAAW;AACT,eAAKD,OAAL;AACD,S","file":"notification/notification.js","sourceRoot":"/source/","sourcesContent":["import {inject, Container} from 'aurelia-dependency-injection';\nimport {customElement} from 'aurelia-templating';\nimport {WidgetBase} from '../common/widget-base';\nimport {generateBindables} from '../common/decorators';\nimport {constants} from '../common/constants';\n\n@customElement(`${constants.elementPrefix}notification`)\n@generateBindables('kendoNotification')\n@inject(Element, WidgetBase, Container)\nexport class Notification {\n  constructor(element, widgetBase, container) {\n    this.element = element;\n    this.widgetBase = widgetBase\n      .control('kendoNotification')\n      .useElement(this.element)\n      .beforeInitialize(options => this.beforeInitialize(options))\n      .linkViewModel(this)\n      .useContainer(container);\n  }\n\n  subscribe(event, callback) {\n    return this.widgetBase.subscribe(event, callback);\n  }\n\n  bind(ctx, overrideCtx) {\n    this.widgetBase.useParentCtx(overrideCtx);\n  }\n\n  attached() {\n    if (!this.kNoInit) {\n      this.recreate();\n    }\n  }\n\n  recreate() {\n    this.kWidget = this.widgetBase.recreate();\n  }\n\n  beforeInitialize(options) {\n    let templates = this.widgetBase.util.getChildrenVMs(this.element, `${constants.elementPrefix}notification-template`);\n    if (templates && templates.length > 0) {\n      options.templates = [];\n\n      templates.forEach(template => options.templates.push({\n        type: template.type,\n        template: () => template.template\n      }));\n    }\n  }\n\n  destroy() {\n    this.widgetBase.destroy(this.kWidget);\n  }\n\n  detached() {\n    this.destroy();\n  }\n}\n"]}