{"version":3,"sources":["common/control-properties.js"],"names":["bindables","inject","Util","ControlProperties","util","cache","getProperties","controlName","extraProperties","options1","getWidgetProperties","options2","getGeneratedProperties","keys","concat","filter","indexOf","item","Error","window","kendo","jQuery","fn","Object","widget","prototype","options","getTemplateProperties","properties","templates","isTemplateProperty","prop"],"mappings":";;;;;;;;;;;;;AAAQA,e,cAAAA,S;;AACAC,Y,+BAAAA,M;;AACAC,U,SAAAA,I;;;mCAOKC,iB,WADZF,OAAOC,IAAP,C;AAIC,mCAAYE,IAAZ,EAAwB;AAAA;;AAAA,eAFxBC,KAEwB,GAFhB,EAEgB;;AACtB,eAAKD,IAAL,GAAYA,IAAZ;AACD;;oCAQDE,a,0BAAcC,W,EAAqD;AAAA,cAAhCC,eAAgC,uEAAd,EAAc;;AACjE,cAAI,KAAKH,KAAL,CAAWE,WAAX,CAAJ,EAA6B;AAC3B,mBAAO,KAAKF,KAAL,CAAWE,WAAX,CAAP;AACD;;AAGD,cAAIE,WAAW,KAAKC,mBAAL,CAAyBH,WAAzB,CAAf;;AAEA,cAAII,WAAW,KAAKC,sBAAL,CAA4BL,WAA5B,CAAf;;AAGA,cAAIM,OAAOJ,SAASK,MAAT,CAAgBH,SAASI,MAAT,CAAgB;AAAA,mBAAQN,SAASO,OAAT,CAAiBC,IAAjB,IAAyB,CAAjC;AAAA,WAAhB,CAAhB,CAAX;AACAJ,iBAAOA,KAAKC,MAAL,CAAYN,gBAAgBO,MAAhB,CAAuB;AAAA,mBAAQF,KAAKG,OAAL,CAAaC,IAAb,IAAqB,CAA7B;AAAA,WAAvB,CAAZ,CAAP;;AAEA,eAAKZ,KAAL,CAAWE,WAAX,IAA0BM,IAA1B;;AAEA,iBAAOA,IAAP;AACD,S;;oCAODD,sB,mCAAuBL,W,EAAqB;AAC1C,cAAI,CAACP,UAAUO,WAAV,CAAL,EAA6B;AAC3B,kBAAM,IAAIW,KAAJ,CAAaX,WAAb,0CAAN;AACD;;AAED,iBAAOP,UAAUO,WAAV,CAAP;AACD,S;;oCAODG,mB,gCAAoBH,W,EAA+B;AACjD,cAAIY,OAAOC,KAAP,IAAgBA,MAAMC,MAAN,CAAaC,EAAb,CAAgBf,WAAhB,CAApB,EAAkD;AAChD,mBAAOgB,OAAOV,IAAP,CAAYO,MAAMC,MAAN,CAAaC,EAAb,CAAgBf,WAAhB,EAA6BiB,MAA7B,CAAoCC,SAApC,CAA8CC,OAA1D,CAAP;AACD;;AAED,iBAAO,EAAP;AACD,S;;oCAMDC,qB,kCAAsBpB,W,EAA+B;AAAA;;AACnD,cAAIqB,aAAa,KAAKtB,aAAL,CAAmBC,WAAnB,CAAjB;;AAEA,cAAIsB,YAAYD,WAAWb,MAAX,CAAkB;AAAA,mBAAQ,MAAKX,IAAL,CAAU0B,kBAAV,CAA6BC,IAA7B,CAAR;AAAA,WAAlB,CAAhB;;AAEA,iBAAOF,SAAP;AACD,S","file":"common/control-properties.js","sourceRoot":"/source/","sourcesContent":["import {bindables} from './bindables';\r\nimport {inject} from 'aurelia-dependency-injection';\r\nimport {Util} from './util';\r\n\r\n/***\r\n* Available properties (merged together from several locations) are stored here per controlName\r\n* so that this isn't done for each created wrapper instance\r\n*/\r\n@inject(Util)\r\nexport class ControlProperties {\r\n  cache = {};\r\n\r\n  constructor(util: Util) {\r\n    this.util = util;\r\n  }\r\n\r\n  /**\r\n  * Merges together available properties for a specific control\r\n  * and stores this in a cache so that this is done only once per control\r\n  * @param controlName the name of the kendo control (kendoGrid, kendoButton)\r\n  * @param extraProperties allows you to provide an extra list of available properties\r\n  */\r\n  getProperties(controlName: string, extraProperties = []): string[] {\r\n    if (this.cache[controlName]) {\r\n      return this.cache[controlName];\r\n    }\r\n\r\n    // get available properties of the options object inside a Kendo control\r\n    let options1 = this.getWidgetProperties(controlName);\r\n    // get available properties of the pre-generated bindables.json file\r\n    let options2 = this.getGeneratedProperties(controlName);\r\n\r\n    // merge together without duplicates\r\n    let keys = options1.concat(options2.filter(item => options1.indexOf(item) < 0));\r\n    keys = keys.concat(extraProperties.filter(item => keys.indexOf(item) < 0));\r\n\r\n    this.cache[controlName] = keys;\r\n\r\n    return keys;\r\n  }\r\n\r\n\r\n  /**\r\n  * returns a list of properties of a Kendo control that has been pre-generated (into bindables.js)\r\n  * @param controlName the name of the kendo control (kendoGrid, kendoButton)\r\n  */\r\n  getGeneratedProperties(controlName: string) {\r\n    if (!bindables[controlName]) {\r\n      throw new Error(`${controlName} not found in generated bindables.js`);\r\n    }\r\n\r\n    return bindables[controlName];\r\n  }\r\n\r\n  /*\r\n  * returns the intrinsic list of properties of a kendo control\r\n  * returns an empty array if the control is not loaded\r\n  * @param controlName the name of the kendo control (kendoGrid, kendoButton)\r\n  */\r\n  getWidgetProperties(controlName: string): string[] {\r\n    if (window.kendo && kendo.jQuery.fn[controlName]) {\r\n      return Object.keys(kendo.jQuery.fn[controlName].widget.prototype.options);\r\n    }\r\n\r\n    return [];\r\n  }\r\n\r\n  /*\r\n  * filters list of properties of a control by template property\r\n  * @param controlName the name of the kendo control (kendoGrid, kendoButton)\r\n  */\r\n  getTemplateProperties(controlName: string): string[] {\r\n    let properties = this.getProperties(controlName);\r\n\r\n    let templates = properties.filter(prop => this.util.isTemplateProperty(prop));\r\n\r\n    return templates;\r\n  }\r\n}\r\n"]}