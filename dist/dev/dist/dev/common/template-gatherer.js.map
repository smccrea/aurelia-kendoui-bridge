{"version":3,"sources":["common/template-gatherer.js"],"names":["ControlProperties","Util","inject","KendoConfigBuilder","createOverrideContext","Parser","TemplateGatherer","controlProperties","util","config","useTemplates","target","controlName","templates","templateProps","getTemplateProperties","forEach","c","for","Error","indexOf","join","hasValue","template","templateCallback","parser","expression","parse","iterator","object","name","getBindablePropertyName","scope","assign","kendoTemplate"],"mappings":";;;;;;;;;;;;;AAAQA,uB,sBAAAA,iB;;AACAC,U,SAAAA,I;;AACAC,Y,+BAAAA,M;;AACAC,wB,kBAAAA,kB;;AACAC,2B,mBAAAA,qB;AAAuBC,Y,mBAAAA,M;;;kCAGlBC,gB,WADZJ,OAAOF,iBAAP,EAA0BC,IAA1B,EAAgCE,kBAAhC,C;AAIC,kCAAYI,iBAAZ,EAAkDC,IAAlD,EAA8DC,MAA9D,EAA0F;AAAA;;AACxF,eAAKF,iBAAL,GAAyBA,iBAAzB;AACA,eAAKE,MAAL,GAAcA,MAAd;AACA,eAAKD,IAAL,GAAYA,IAAZ;AACD;;mCAUDE,Y,yBAAaC,M,EAAQC,W,EAAaC,S,EAAW;AAAA;;AAC3C,cAAIC,gBAAgB,KAAKP,iBAAL,CAAuBQ,qBAAvB,CAA6CH,WAA7C,CAApB;;AAEA,cAAI,CAACC,SAAL,EAAgB;AACdA,wBAAY,EAAZ;AACD;;AAEDA,oBAAUG,OAAV,CAAkB,aAAK;AACrB,gBAAI,CAACC,EAAEC,GAAP,EAAY;AACV,oBAAM,IAAIC,KAAJ,CAAU,kHAAV,CAAN;AACD;;AAED,gBAAIL,cAAcM,OAAd,CAAsBH,EAAEC,GAAxB,MAAiC,CAAC,CAAtC,EAAyC;AACvC,kBAAID,EAAEC,GAAF,CAAME,OAAN,CAAc,GAAd,MAAuB,CAAC,CAA5B,EAA+B;AAC7B,sBAAM,IAAID,KAAJ,CAAU,sCAAsCF,EAAEC,GAAxC,GAA8C,uBAA9C,GAAwEJ,cAAcO,IAAd,CAAmB,IAAnB,CAAlF,CAAN;AACD;AACF;;AAED,gBAAI,MAAKb,IAAL,CAAUc,QAAV,CAAmBL,EAAEM,QAArB,CAAJ,EAAoC;AAClC,kBAAIA,WAAWN,EAAEM,QAAjB;;AAEA,kBAAI,MAAKd,MAAL,CAAYe,gBAAhB,EAAkC;AAChCD,2BAAW,MAAKd,MAAL,CAAYe,gBAAZ,CAA6Bb,MAA7B,EAAqCM,CAArC,EAAwCA,EAAEM,QAA1C,CAAX;AACD;;AAKD,kBAAIE,SAAS,IAAIpB,MAAJ,EAAb;;AAEA,kBAAIqB,aAAaD,OAAOE,KAAP,CAAaV,EAAEC,GAAf,CAAjB;;AAGA,kBAAIU,WAAWF,UAAf;AACA,qBAAOE,QAAP,EAAiB;AACf,oBAAI,CAACA,SAASC,MAAd,EAAsB;AAEpBD,2BAASE,IAAT,GAAgB,MAAKtB,IAAL,CAAUuB,uBAAV,CAAkCH,SAASE,IAA3C,CAAhB;AACD;AACDF,2BAAWA,SAASC,MAApB;AACD;;AAED,kBAAIG,QAAQ5B,sBAAsBO,MAAtB,EAA8B,EAA9B,CAAZ;;AAIAe,yBAAWO,MAAX,CAAkBD,KAAlB,EAAyBf,EAAEiB,aAAF,GAAkBX,QAAlB,GAA6B;AAAA,uBAAMA,QAAN;AAAA,eAAtD;AACD;AACF,WAzCD;AA0CD,S","file":"common/template-gatherer.js","sourceRoot":"/source/","sourcesContent":["import {ControlProperties} from './control-properties';\nimport {Util} from './util';\nimport {inject} from 'aurelia-dependency-injection';\nimport {KendoConfigBuilder} from '../config-builder';\nimport {createOverrideContext, Parser} from 'aurelia-binding';\n\n@inject(ControlProperties, Util, KendoConfigBuilder)\nexport class TemplateGatherer {\n  controlProperties: ControlProperties;\n\n  constructor(controlProperties: ControlProperties, util: Util, config: KendoConfigBuilder) {\n    this.controlProperties = controlProperties;\n    this.config = config;\n    this.util = util;\n  }\n\n  /***\n  * parses array of ak-template view-models (@children)\n  * <ak-template for='test'>\n  * this function sets the property 'test' on the viewmodel to the template\n  * @param target the viewModel with template properties\n  * @param kendoGrid or GridColumn, properties are retrieved from bindables.js\n  * @param templates array of ak-template view-models\n  */\n  useTemplates(target, controlName, templates) {\n    let templateProps = this.controlProperties.getTemplateProperties(controlName);\n\n    if (!templates) {\n      templates = [];\n    }\n\n    templates.forEach(c => {\n      if (!c.for) {\n        throw new Error('Templating support is not enabled. Call .kendoTemplateSupport() in main.js or import common/template via require');\n      }\n\n      if (templateProps.indexOf(c.for) === -1) {\n        if (c.for.indexOf('.') === -1) {\n          throw new Error('Invalid template property name: \"' + c.for + '\", valid values are: ' + templateProps.join(', '));\n        }\n      }\n\n      if (this.util.hasValue(c.template)) {\n        let template = c.template;\n\n        if (this.config.templateCallback) {\n          template = this.config.templateCallback(target, c, c.template);\n        }\n\n        // now we must parse the expression inside for=\"\" on the ak-template\n        // and set the template on the wrapper object\n        // get a ParserImplementation for the expression inside for=\"editable.template\"\n        let parser = new Parser();\n        // get the expression (generates a tree of AccessMembers)\n        let expression = parser.parse(c.for);\n        // when the user uses \"editable.template\" it must be set as \"kEditable.template\"\n        // so here we iterate through the tree until we get to the last object (the first part of the expression)\n        let iterator = expression;\n        while (iterator) {\n          if (!iterator.object) {\n            // convert \"editable\" to \"kEditable\"\n            iterator.name = this.util.getBindablePropertyName(iterator.name);\n          }\n          iterator = iterator.object;\n        }\n        // get the scope of the widget instance\n        let scope = createOverrideContext(target, {});\n        // set the value on the object based on the expression\n        // so if the expression is \"a.b.c\" and the template is \"abcd\"\n        // it will set { a: { b: { c: 'abcd' }}}\n        expression.assign(scope, c.kendoTemplate ? template : () => template);\n      }\n    });\n  }\n}\n"]}