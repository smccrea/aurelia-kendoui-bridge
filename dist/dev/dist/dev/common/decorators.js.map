{"version":3,"sources":["common/decorators.js"],"names":["generateBindables","controlName","extraProperties","target","key","descriptor","behaviorResource","metadata","getOrCreateOwn","resource","HtmlBehaviorResource","container","Container","instance","controlProperties","get","ControlProperties","util","Util","optionKeys","getProperties","push","i","length","option","nameOrConfigOrTarget","name","getBindablePropertyName","defaultBindingMode","bindingMode","twoWay","prop","BindableProperty","registerWith","delayed","taskQueue","TaskQueue","ptr","value","args","queueTask","apply"],"mappings":";;;;AAaO,WAASA,iBAAT,CAA2BC,WAA3B,EAAsE;AAAA,QAAtBC,eAAsB,uEAAJ,EAAI;;AAC3E,WAAO,UAASC,MAAT,EAAiBC,GAAjB,EAAsBC,UAAtB,EAAkC;AAGvC,UAAIC,mBAAmBC,SAASC,cAAT,CAAwBD,SAASE,QAAjC,EAA2CC,oBAA3C,EAAiEP,MAAjE,CAAvB;AACA,UAAIQ,YAAaC,UAAUC,QAAV,IAAsB,IAAID,SAAJ,EAAvC;AACA,UAAIE,oBAAoBH,UAAUI,GAAV,CAAcC,iBAAd,CAAxB;AACA,UAAIC,OAAON,UAAUI,GAAV,CAAcG,IAAd,CAAX;AACA,UAAIC,aAAaL,kBAAkBM,aAAlB,CAAgCnB,WAAhC,EAA6CC,eAA7C,CAAjB;;AAEAiB,iBAAWE,IAAX,CAAgB,QAAhB;AACAF,iBAAWE,IAAX,CAAgB,SAAhB;AACAF,iBAAWE,IAAX,CAAgB,QAAhB;;AAEA,WAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,WAAWI,MAA/B,EAAuCD,GAAvC,EAA4C;AAC1C,YAAIE,SAASL,WAAWG,CAAX,CAAb;;AAGA,YAAIG,uBAAuB;AACzBC,gBAAMT,KAAKU,uBAAL,CAA6BH,MAA7B;AADmB,SAA3B;;AAIA,YAAIA,WAAW,QAAf,EAAyB;AACvBC,+BAAqBG,kBAArB,GAA0CC,YAAYC,MAAtD;AACD;;AAED,YAAIC,OAAO,IAAIC,gBAAJ,CAAqBP,oBAArB,CAAX;AACAM,aAAKE,YAAL,CAAkB9B,MAAlB,EAA0BG,gBAA1B,EAA4CD,UAA5C;AACD;AACF,KA5BD;AA6BD;;+BA9BeL,iB;;AAiCT,WAASkC,OAAT,GAAmB;AACxB,WAAO,UAAS/B,MAAT,EAAiBC,GAAjB,EAAsBC,UAAtB,EAAkC;AACvC,UAAI8B,YAAY,CAACvB,UAAUC,QAAV,IAAsB,IAAID,SAAJ,EAAvB,EAAwCG,GAAxC,CAA4CqB,SAA5C,CAAhB;AACA,UAAIC,MAAMhC,WAAWiC,KAArB;;AAEAjC,iBAAWiC,KAAX,GAAmB,YAAkB;AAAA;;AAAA,0CAANC,IAAM;AAANA,cAAM;AAAA;;AACnCJ,kBAAUK,SAAV,CAAoB;AAAA,iBAAMH,IAAII,KAAJ,CAAU,KAAV,EAAgBF,IAAhB,CAAN;AAAA,SAApB;AACD,OAFD;;AAIA,aAAOlC,UAAP;AACD,KATD;AAUD;;qBAXe6B,O;;;;AA9CRF,sB,sBAAAA,gB;AAAkBtB,0B,sBAAAA,oB;;AAClBE,e,+BAAAA,S;;AACAL,c,oBAAAA,Q;;AACAsB,iB,mBAAAA,W;;AACAO,e,qBAAAA,S;;AACApB,uB,sBAAAA,iB;;AACAE,U,SAAAA,I","file":"common/decorators.js","sourceRoot":"/source/","sourcesContent":["import {BindableProperty, HtmlBehaviorResource} from 'aurelia-templating';\r\nimport {Container} from 'aurelia-dependency-injection';\r\nimport {metadata} from 'aurelia-metadata';\r\nimport {bindingMode} from 'aurelia-binding';\r\nimport {TaskQueue} from 'aurelia-task-queue';\r\nimport {ControlProperties} from './control-properties';\r\nimport {Util} from './util';\r\n\r\n/**\r\n* Creates a BindableProperty for every option defined in a Kendo control\r\n* in the option property of a Kendo control\r\n* @param controlName The Kendo control of which the options should be converted into bindable properties\r\n*/\r\nexport function generateBindables(controlName: string, extraProperties = []) {\r\n  return function(target, key, descriptor) {\r\n    // get or create the HtmlBehaviorResource\r\n    // on which we're going to create the BindableProperty's\r\n    let behaviorResource = metadata.getOrCreateOwn(metadata.resource, HtmlBehaviorResource, target);\r\n    let container = (Container.instance || new Container());\r\n    let controlProperties = container.get(ControlProperties);\r\n    let util = container.get(Util);\r\n    let optionKeys = controlProperties.getProperties(controlName, extraProperties);\r\n\r\n    optionKeys.push('widget');\r\n    optionKeys.push('options');\r\n    optionKeys.push('noInit');\r\n\r\n    for (let i = 0; i < optionKeys.length; i++) {\r\n      let option = optionKeys[i];\r\n\r\n      // set the name of the bindable property to the option\r\n      let nameOrConfigOrTarget = {\r\n        name: util.getBindablePropertyName(option)\r\n      };\r\n\r\n      if (option === 'widget') {\r\n        nameOrConfigOrTarget.defaultBindingMode = bindingMode.twoWay;\r\n      }\r\n\r\n      let prop = new BindableProperty(nameOrConfigOrTarget);\r\n      prop.registerWith(target, behaviorResource, descriptor);\r\n    }\r\n  };\r\n}\r\n\r\n\r\nexport function delayed() {\r\n  return function(target, key, descriptor) {\r\n    let taskQueue = (Container.instance || new Container()).get(TaskQueue);\r\n    let ptr = descriptor.value;\r\n\r\n    descriptor.value = function(...args) {\r\n      taskQueue.queueTask(() => ptr.apply(this, args));\r\n    };\r\n\r\n    return descriptor;\r\n  };\r\n}\r\n"]}