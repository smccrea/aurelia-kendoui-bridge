{"version":3,"sources":["common/util.js"],"names":["constants","capitalMatcher","Util","addHyphenAndLower","char","toLowerCase","_hyphenate","name","charAt","slice","replace","_unhyphenate","g","toUpperCase","getBindablePropertyName","propertyName","bindablePrefix","getKendoPropertyName","withoutPrefix","substring","getEventsFromAttributes","element","attributes","Array","prototype","call","events","i","length","attribute","attributeName","startsWith","eventPrefix","hyphenatedEvent","split","withoutTriggerDelegate","camelCased","push","pruneOptions","options","returnOptions","prop","hasValue","fireEvent","data","event","CustomEvent","detail","bubbles","cancelable","dispatchEvent","fireKendoEvent","isTemplateProperty","indexOf","isObject","obj","getChildrenVMs","cssSelector","elements","kendo","jQuery","children","viewModels","each","index","elem","au","controller","viewModel","Error","tagName"],"mappings":";;;;;;;;;;;;;AACQA,e,cAAAA,S;;;;;;;;AADFC,oB,GAAiB,U;;sBAMVC,I;;;;;uBAKXC,iB,8BAAkBC,I,EAAsB;AACtC,iBAAO,MAAMA,KAAKC,WAAL,EAAb;AACD,S;;uBAODC,U,uBAAWC,I,EAAsB;AAC/B,iBAAO,CAACA,KAAKC,MAAL,CAAY,CAAZ,EAAeH,WAAf,KAA+BE,KAAKE,KAAL,CAAW,CAAX,CAAhC,EAA+CC,OAA/C,CAAuDT,cAAvD,EAAuE,KAAKE,iBAA5E,CAAP;AACD,S;;uBAMDQ,Y,yBAAaJ,I,EAAsB;AACjC,iBAAOA,KAAKG,OAAL,CAAa,WAAb,EAA0B,UAACE,CAAD;AAAA,mBAAOA,EAAE,CAAF,EAAKC,WAAL,EAAP;AAAA,WAA1B,CAAP;AACD,S;;uBAMDC,uB,oCAAwBC,Y,EAA8B;AACpD,cAAIR,YAAUP,UAAUgB,cAApB,GAAqCD,YAAzC;;AAEA,iBAAO,KAAKJ,YAAL,CAAkBJ,IAAlB,CAAP;AACD,S;;uBAMDU,oB,iCAAqBF,Y,EAA8B;AACjD,cAAIG,gBAAgBH,aAAaI,SAAb,CAAuB,CAAvB,CAApB;;AAEA,iBAAQD,cAAcV,MAAd,CAAqB,CAArB,EAAwBH,WAAxB,KAAwCa,cAAcT,KAAd,CAAoB,CAApB,CAAhD;AACD,S;;uBAMDW,uB,oCAAwBC,O,EAA4B;AAClD,cAAIC,aAAaC,MAAMC,SAAN,CAAgBf,KAAhB,CAAsBgB,IAAtB,CAA2BJ,QAAQC,UAAnC,CAAjB;AACA,cAAII,SAAmB,EAAvB;;AAEA,eAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIL,WAAWM,MAA/B,EAAuCD,GAAvC,EAA4C;AAC1C,gBAAIE,YAAYP,WAAWK,CAAX,CAAhB;AACA,gBAAIG,gBAAgBD,UAAUtB,IAA9B;AACA,gBAAI,CAACuB,cAAcC,UAAd,CAAyB/B,UAAUgC,WAAnC,CAAL,EAAsD;;AAGtD,gBAAIC,kBAAkBH,cAAcI,KAAd,CAAoBlC,UAAUgC,WAA9B,EAA2C,CAA3C,CAAtB;;AAGA,gBAAIG,yBAAyBF,gBAAgBC,KAAhB,CAAsB,GAAtB,EAA2B,CAA3B,CAA7B;;AAGA,gBAAIE,aAAa,KAAKzB,YAAL,CAAkBwB,sBAAlB,CAAjB;;AAEAT,mBAAOW,IAAP,CAAYD,UAAZ;AACD;;AAED,iBAAOV,MAAP;AACD,S;;uBASDY,Y,yBAAaC,O,EAAc;AACzB,cAAIC,gBAAgB,EAApB;;AAEA,eAAK,IAAIC,IAAT,IAAiBF,OAAjB,EAA0B;AACxB,gBAAI,KAAKG,QAAL,CAAcH,QAAQE,IAAR,CAAd,CAAJ,EAAkC;AAChCD,4BAAcC,IAAd,IAAsBF,QAAQE,IAAR,CAAtB;AACD;AACF;;AAED,iBAAOD,aAAP;AACD,S;;uBAEDE,Q,qBAASD,I,EAAM;AACb,iBAAO,OAAOA,IAAP,KAAiB,WAAjB,IAAgCA,SAAS,IAAhD;AACD,S;;uBAQDE,S,sBAAUtB,O,EAAkBd,I,EAAyB;AAAA,cAAXqC,IAAW,uEAAJ,EAAI;;AACnD,cAAIC,QAAQ,IAAIC,WAAJ,CAAgBvC,IAAhB,EAAsB;AAChCwC,oBAAQH,IADwB;AAEhCI,qBAAS,IAFuB;AAGhCC,wBAAY;AAHoB,WAAtB,CAAZ;AAKA5B,kBAAQ6B,aAAR,CAAsBL,KAAtB;;AAEA,iBAAOA,KAAP;AACD,S;;uBAQDM,c,2BAAe9B,O,EAAkBd,I,EAAyB;AAAA,cAAXqC,IAAW,uEAAJ,EAAI;;AACxD,iBAAO,KAAKD,SAAL,CAAetB,OAAf,OAA2BrB,UAAUgC,WAArC,GAAmDzB,IAAnD,EAA2DqC,IAA3D,CAAP;AACD,S;;uBAKDQ,kB,+BAAmBrC,Y,EAAsB;AACvC,iBAAOA,aAAaV,WAAb,GAA2BgD,OAA3B,CAAmC,UAAnC,IAAiD,CAAC,CAAzD;AACD,S;;uBAKDC,Q,qBAASC,G,EAAK;AACZ,iBAAOA,QAAQ,IAAR,IAAgB,QAAOA,GAAP,yCAAOA,GAAP,OAAgB,QAAvC;AACD,S;;uBAEDC,c,2BAAenC,O,EAASoC,W,EAAa;AACnC,cAAIC,WAAWC,MAAMC,MAAN,CAAavC,OAAb,EAAsBwC,QAAtB,CAA+BJ,WAA/B,CAAf;AACA,cAAIK,aAAa,EAAjB;AACAJ,mBAASK,IAAT,CAAc,UAACC,KAAD,EAAQC,IAAR,EAAiB;AAC7B,gBAAIA,KAAKC,EAAL,IAAWD,KAAKC,EAAL,CAAQC,UAAvB,EAAmC;AACjCL,yBAAWzB,IAAX,CAAgB4B,KAAKC,EAAL,CAAQC,UAAR,CAAmBC,SAAnC;AACD,aAFD,MAEO;AACL,oBAAM,IAAIC,KAAJ,uCAA8CJ,KAAKK,OAAnD,sEAAN;AACD;AACF,WAND;AAOA,iBAAOR,UAAP;AACD,S","file":"common/util.js","sourceRoot":"/source/","sourcesContent":["const capitalMatcher = /([A-Z])/g;\r\nimport {constants} from './constants';\r\n\r\n/**\r\n* Collection of useful functions used in multiple parts of the plugin\r\n*/\r\nexport class Util {\r\n  /**\r\n  * prepends hyphen and lowercases the input char\r\n  * @param char the char to add an hyphen in front for\r\n  */\r\n  addHyphenAndLower(char: string): string {\r\n    return '-' + char.toLowerCase();\r\n  }\r\n\r\n  /**\r\n  * hyphenates a string\r\n  * kTest -> k-test\r\n  * @param name the string to hyphenate\r\n  */\r\n  _hyphenate(name: string): string {\r\n    return (name.charAt(0).toLowerCase() + name.slice(1)).replace(capitalMatcher, this.addHyphenAndLower);\r\n  }\r\n\r\n  /**\r\n  * unhyphenate's a string\r\n  * k-test -> kTest\r\n  */\r\n  _unhyphenate(name: string): string {\r\n    return name.replace(/-([a-z])/g, (g) => g[1].toUpperCase());\r\n  }\r\n\r\n  /**\r\n  * prepends prefix and unhyphenates the resulting string\r\n  * test -> kTest\r\n  */\r\n  getBindablePropertyName(propertyName: string): string {\r\n    let name = `${constants.bindablePrefix}${propertyName}`;\r\n\r\n    return this._unhyphenate(name);\r\n  }\r\n\r\n  /**\r\n  * removes prefix and unhyphenates the resulting string\r\n  * kTest -> test\r\n  */\r\n  getKendoPropertyName(propertyName: string): string {\r\n    let withoutPrefix = propertyName.substring(1); // remove 'k'\r\n\r\n    return (withoutPrefix.charAt(0).toLowerCase() + withoutPrefix.slice(1));\r\n  }\r\n\r\n  /**\r\n  * converts all attributes found on an element to matching Kendo events\r\n  * returns a list of these Kendo events\r\n  */\r\n  getEventsFromAttributes(element: Element): string[] {\r\n    let attributes = Array.prototype.slice.call(element.attributes);\r\n    let events: string[] = [];\r\n\r\n    for (let i = 0; i < attributes.length; i++) {\r\n      let attribute = attributes[i];\r\n      let attributeName = attribute.name;\r\n      if (!attributeName.startsWith(constants.eventPrefix)) continue;\r\n\r\n      // kendo-my-event.trigger -> my-event.trigger\r\n      let hyphenatedEvent = attributeName.split(constants.eventPrefix)[1];\r\n\r\n      // my-event.trigger -> my-event\r\n      let withoutTriggerDelegate = hyphenatedEvent.split('.')[0];\r\n\r\n      // my-event -> myEvent\r\n      let camelCased = this._unhyphenate(withoutTriggerDelegate);\r\n\r\n      events.push(camelCased);\r\n    }\r\n\r\n    return events;\r\n  }\r\n\r\n\r\n  /**\r\n  * Implicitly setting options to \"undefined\" for a kendo control can break things.\r\n  * this function prunes the supplied options object and removes values that\r\n  * aren't set to something explicit (i.e. not null)\r\n  * @param options the options object to prune the properties of\r\n  */\r\n  pruneOptions(options: any) {\r\n    let returnOptions = {};\r\n\r\n    for (let prop in options) {\r\n      if (this.hasValue(options[prop])) {\r\n        returnOptions[prop] = options[prop];\r\n      }\r\n    }\r\n\r\n    return returnOptions;\r\n  }\r\n\r\n  hasValue(prop) {\r\n    return typeof(prop) !== 'undefined' && prop !== null;\r\n  }\r\n\r\n  /**\r\n  * Fire DOM event on an element\r\n  * @param element The Element which the DOM event will be fired on\r\n  * @param name The Event's name\r\n  * @param data Addition data to attach to an event\r\n  */\r\n  fireEvent(element: Element, name: string, data = {}) {\r\n    let event = new CustomEvent(name, {\r\n      detail: data,\r\n      bubbles: true,\r\n      cancelable: true\r\n    });\r\n    element.dispatchEvent(event);\r\n\r\n    return event;\r\n  }\r\n\r\n  /**\r\n  * Fire DOM event on an element with the k-on prefix\r\n  * @param element The Element which the DOM event will be fired on\r\n  * @param name The Event's name, without k-on prefix\r\n  * @param data Addition data to attach to an event\r\n  */\r\n  fireKendoEvent(element: Element, name: string, data = {}) {\r\n    return this.fireEvent(element, `${constants.eventPrefix}${name}`, data);\r\n  }\r\n\r\n  /**\r\n  * detection of template properties\r\n  */\r\n  isTemplateProperty(propertyName: string) {\r\n    return propertyName.toLowerCase().indexOf('template') > -1;\r\n  }\r\n\r\n  /**\r\n  * detection of objects\r\n  */\r\n  isObject(obj) {\r\n    return obj !== null && typeof(obj) === 'object';\r\n  }\r\n\r\n  getChildrenVMs(element, cssSelector) {\r\n    let elements = kendo.jQuery(element).children(cssSelector);\r\n    let viewModels = [];\r\n    elements.each((index, elem) => {\r\n      if (elem.au && elem.au.controller) {\r\n        viewModels.push(elem.au.controller.viewModel);\r\n      } else {\r\n        throw new Error(`au property not found on element ${elem.tagName}. Did you load this custom element via <require> or via main.js?`);\r\n      }\r\n    });\r\n    return viewModels;\r\n  }\r\n}\r\n"]}