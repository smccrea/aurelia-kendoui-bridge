{"version":3,"sources":["common/options-builder.js"],"names":["inject","ControlProperties","Util","OptionsBuilder","controlProperties","util","getOptions","viewModel","className","options","props","getProperties","beforeOptionsBuild","i","length","prop","value","getBindablePropertyName","hasValue","afterOptionsBuild","pruneOptions"],"mappings":";;;;;;;;;;;;;AAAQA,Y,+BAAAA,M;;AACAC,uB,sBAAAA,iB;;AACAC,U,SAAAA,I;;;gCAOKC,c,WADZH,OAAOC,iBAAP,EAA0BC,IAA1B,C;AAEC,gCAAYE,iBAAZ,EAAkDC,IAAlD,EAA8D;AAAA;;AAC5D,eAAKD,iBAAL,GAAyBA,iBAAzB;AACA,eAAKC,IAAL,GAAYA,IAAZ;AACD;;iCAKDC,U,uBAAWC,S,EAAWC,S,EAAW;AAC/B,cAAIC,UAAU,EAAd;AACA,cAAIC,QAAQ,KAAKN,iBAAL,CAAuBO,aAAvB,CAAqCH,SAArC,CAAZ;;AAIA,cAAID,UAAUK,kBAAd,EAAkC;AAChCL,sBAAUK,kBAAV,CAA6BH,OAA7B;AACD;;AAED,eAAK,IAAII,IAAI,CAAb,EAAgBA,IAAIH,MAAMI,MAA1B,EAAkCD,GAAlC,EAAuC;AACrC,gBAAIE,OAAOL,MAAMG,CAAN,CAAX;AACA,gBAAIG,QAAQT,UAAU,KAAKF,IAAL,CAAUY,uBAAV,CAAkCF,IAAlC,CAAV,CAAZ;;AAEA,gBAAI,KAAKV,IAAL,CAAUa,QAAV,CAAmBF,KAAnB,CAAJ,EAA+B;AAC7BP,sBAAQM,IAAR,IAAgBC,KAAhB;AACD;AACF;;AAID,cAAIT,UAAUY,iBAAd,EAAiC;AAC/BZ,sBAAUY,iBAAV,CAA4BV,OAA5B;AACD;;AAED,iBAAO,KAAKJ,IAAL,CAAUe,YAAV,CAAuBX,OAAvB,CAAP;AACD,S","file":"common/options-builder.js","sourceRoot":"/source/","sourcesContent":["import {inject} from 'aurelia-dependency-injection';\nimport {ControlProperties} from './control-properties';\nimport {Util} from './util';\n\n/***\n* Converts an object with bindable properties (with k- convention)\n* into an object that can be passed to a Kendo control\n*/\n@inject(ControlProperties, Util)\nexport class OptionsBuilder {\n  constructor(controlProperties: ControlProperties, util: Util) {\n    this.controlProperties = controlProperties;\n    this.util = util;\n  }\n\n  /**\n  * converts properties of view-model (with k- convention) to an object\n  */\n  getOptions(viewModel, className) {\n    let options = {};\n    let props = this.controlProperties.getProperties(className);\n\n    // allows view-models to do some pre processing\n    // for example, process all ak-templates\n    if (viewModel.beforeOptionsBuild) {\n      viewModel.beforeOptionsBuild(options);\n    }\n\n    for (let i = 0; i < props.length; i++) {\n      let prop = props[i];\n      let value = viewModel[this.util.getBindablePropertyName(prop)];\n\n      if (this.util.hasValue(value)) {\n        options[prop] = value;\n      }\n    }\n\n    // allows view-models to do some post processing\n    // used in ak-col to support nested columns\n    if (viewModel.afterOptionsBuild) {\n      viewModel.afterOptionsBuild(options);\n    }\n\n    return this.util.pruneOptions(options);\n  }\n}\n"]}