{"version":3,"sources":["toolbar/toolbar-item.js"],"names":["customElement","inject","constants","generateBindables","TemplateGatherer","OptionsBuilder","Util","ToolbarItem","elementPrefix","Element","templateGatherer","optionsBuilder","util","element","getOptions","templates","getChildrenVMs","useTemplates","buttons","length","kButtons","forEach","push","item"],"mappings":";;;;;;;;;;;;;AAAQA,mB,sBAAAA,a;;AACAC,Y,+BAAAA,M;;AACAC,e,oBAAAA,S;;AACAC,uB,qBAAAA,iB;;AACAC,sB,2BAAAA,gB;;AACAC,oB,yBAAAA,c;;AACAC,U,eAAAA,I;;;6BAKKC,W,WAHZP,cAAiBE,UAAUM,aAA3B,kB,UACAL,kBAAkB,aAAlB,C,UACAF,OAAOG,gBAAP,EAAyBC,cAAzB,EAAyCC,IAAzC,EAA+CG,OAA/C,C;AAEC,6BAAYC,gBAAZ,EAA8BC,cAA9B,EAA8CC,IAA9C,EAAoDC,OAApD,EAA6D;AAAA;;AAC3D,eAAKH,gBAAL,GAAwBA,gBAAxB;AACA,eAAKC,cAAL,GAAsBA,cAAtB;AACA,eAAKC,IAAL,GAAYA,IAAZ;AACA,eAAKC,OAAL,GAAeA,OAAf;AACD;;8BAEDC,U,yBAAa;AAAA;;AACX,cAAIC,YAAY,KAAKH,IAAL,CAAUI,cAAV,CAAyB,KAAKH,OAA9B,EAA0CX,UAAUM,aAApD,cAAhB;AACA,eAAKE,gBAAL,CAAsBO,YAAtB,CAAmC,IAAnC,EAAyC,aAAzC,EAAwDF,SAAxD;;AAEA,cAAIG,UAAU,KAAKN,IAAL,CAAUI,cAAV,CAAyB,KAAKH,OAA9B,EAA0CX,UAAUM,aAApD,yBAAd;AACA,cAAIU,WAAWA,QAAQC,MAAR,GAAiB,CAAhC,EAAmC;AACjC,iBAAKC,QAAL,GAAgB,EAAhB;;AAEAF,oBAAQG,OAAR,CAAgB,gBAAQ;AACtB,oBAAKD,QAAL,CAAcE,IAAd,CAAmBC,KAAKT,UAAL,EAAnB;AACD,aAFD;AAGD;;AAED,iBAAO,KAAKH,cAAL,CAAoBG,UAApB,CAA+B,IAA/B,EAAqC,aAArC,CAAP;AACD,S","file":"toolbar/toolbar-item.js","sourceRoot":"/source/","sourcesContent":["import {customElement} from 'aurelia-templating';\nimport {inject} from 'aurelia-dependency-injection';\nimport {constants} from '../common/constants';\nimport {generateBindables} from '../common/decorators';\nimport {TemplateGatherer} from '../common/template-gatherer';\nimport {OptionsBuilder} from '../common/options-builder';\nimport {Util} from '../common/util';\n\n@customElement(`${constants.elementPrefix}toolbar-item`)\n@generateBindables('ToolBarItem')\n@inject(TemplateGatherer, OptionsBuilder, Util, Element)\nexport class ToolbarItem {\n  constructor(templateGatherer, optionsBuilder, util, element) {\n    this.templateGatherer = templateGatherer;\n    this.optionsBuilder = optionsBuilder;\n    this.util = util;\n    this.element = element;\n  }\n\n  getOptions() {\n    let templates = this.util.getChildrenVMs(this.element, `${constants.elementPrefix}template`);\n    this.templateGatherer.useTemplates(this, 'ToolBarItem', templates);\n\n    let buttons = this.util.getChildrenVMs(this.element, `${constants.elementPrefix}toolbar-item-button`);\n    if (buttons && buttons.length > 0) {\n      this.kButtons = [];\n\n      buttons.forEach(item => {\n        this.kButtons.push(item.getOptions());\n      });\n    }\n\n    return this.optionsBuilder.getOptions(this, 'ToolBarItem');\n  }\n}\n"]}