{"version":3,"sources":["treelist/treelist.js"],"names":["inject","Container","customElement","WidgetBase","generateBindables","constants","OptionsBuilder","PDF","TreeList","elementPrefix","Element","element","widgetBase","container","optionsBuilder","control","useRootElement","beforeInitialize","_beforeInitialize","options","linkViewModel","useContainer","subscribe","event","callback","bind","ctx","overrideCtx","useParentCtx","attached","targets","querySelectorAll","length","useElement","target","document","createElement","appendChild","kNoInit","recreate","kWidget","columns","util","getChildrenVMs","forEach","push","getOptions","column","destroy","detached"],"mappings":";;;;;;;;;;;;;AAAQA,Y,+BAAAA,M;AAAQC,e,+BAAAA,S;;AACRC,mB,sBAAAA,a;;AACAC,gB,qBAAAA,U;;AACAC,uB,qBAAAA,iB;;AACAC,e,oBAAAA,S;;AACAC,oB,yBAAAA,c;;AACAC,S,WAAAA,G;;;0BAKKC,Q,WAHZN,cAAiBG,UAAUI,aAA3B,e,UACAL,kBAAkB,eAAlB,C,UACAJ,OAAOU,OAAP,EAAgBP,UAAhB,EAA4BF,SAA5B,EAAuCK,cAAvC,C;AAEC,0BAAYK,OAAZ,EAAqBC,UAArB,EAAiCC,SAAjC,EAA4CC,cAA5C,EAA4D;AAAA;;AAAA;;AAC1D,eAAKH,OAAL,GAAeA,OAAf;AACA,eAAKG,cAAL,GAAsBA,cAAtB;AACA,eAAKF,UAAL,GAAkBA,WACfG,OADe,CACP,eADO,EAEfC,cAFe,CAEA,KAAKL,OAFL,EAGfM,gBAHe,CAGE;AAAA,mBAAW,MAAKC,iBAAL,CAAuBC,OAAvB,CAAX;AAAA,WAHF,EAIfC,aAJe,CAID,IAJC,EAKfC,YALe,CAKFR,SALE,CAAlB;AAMD;;2BAEDS,S,sBAAUC,K,EAAOC,Q,EAAU;AACzB,iBAAO,KAAKZ,UAAL,CAAgBU,SAAhB,CAA0BC,KAA1B,EAAiCC,QAAjC,CAAP;AACD,S;;2BAEDC,I,iBAAKC,G,EAAKC,W,EAAa;AACrB,eAAKf,UAAL,CAAgBgB,YAAhB,CAA6BD,WAA7B;AACD,S;;2BAEDE,Q,uBAAW;AACT,cAAIC,UAAU,KAAKnB,OAAL,CAAaoB,gBAAb,CAA8B,KAA9B,CAAd;AACA,cAAID,QAAQE,MAAR,GAAiB,CAArB,EAAwB;AACtB,iBAAKpB,UAAL,CAAgBqB,UAAhB,CAA2BH,QAAQ,CAAR,CAA3B;AACD,WAFD,MAEO;AACL,gBAAII,SAASC,SAASC,aAAT,CAAuB,KAAvB,CAAb;AACA,iBAAKzB,OAAL,CAAa0B,WAAb,CAAyBH,MAAzB;AACA,iBAAKtB,UAAL,CAAgBqB,UAAhB,CAA2BC,MAA3B;AACD;;AAED,cAAI,CAAC,KAAKI,OAAV,EAAmB;AACjB,iBAAKC,QAAL;AACD;AACF,S;;2BAEDA,Q,uBAAW;AACT,eAAKC,OAAL,GAAe,KAAK5B,UAAL,CAAgB2B,QAAhB,EAAf;AACD,S;;2BAEDrB,iB,8BAAkBC,O,EAAS;AAAA;;AACzB,cAAIsB,UAAU,KAAK7B,UAAL,CAAgB8B,IAAhB,CAAqBC,cAArB,CAAoC,KAAKhC,OAAzC,EAAqDN,UAAUI,aAA/D,cAAd;;AAEA,cAAIgC,WAAWA,QAAQT,MAAR,GAAiB,CAAhC,EAAmC;AACjCb,oBAAQsB,OAAR,GAAkB,EAAlB;;AAEAA,oBAAQG,OAAR,CAAgB,kBAAU;AACxBzB,sBAAQsB,OAAR,CAAgBI,IAAhB,CAAqB,OAAK/B,cAAL,CAAoBgC,UAApB,CAA+BC,MAA/B,EAAuC,gBAAvC,CAArB;AACD,aAFD;AAGD;AACF,S;;2BAEDC,O,sBAAU;AACR,eAAKpC,UAAL,CAAgBoC,OAAhB,CAAwB,KAAKR,OAA7B;AACD,S;;2BAEDS,Q,uBAAW;AACT,eAAKD,OAAL;AACD,S","file":"treelist/treelist.js","sourceRoot":"/source/","sourcesContent":["import {inject, Container} from 'aurelia-dependency-injection';\r\nimport {customElement} from 'aurelia-templating';\r\nimport {WidgetBase} from '../common/widget-base';\r\nimport {generateBindables} from '../common/decorators';\r\nimport {constants} from '../common/constants';\r\nimport {OptionsBuilder} from '../common/options-builder';\r\nimport {PDF} from '../pdf/pdf'; //eslint-disable-line no-unused-vars\r\n\r\n@customElement(`${constants.elementPrefix}tree-list`)\r\n@generateBindables('kendoTreeList')\r\n@inject(Element, WidgetBase, Container, OptionsBuilder)\r\nexport class TreeList  {\r\n  constructor(element, widgetBase, container, optionsBuilder) {\r\n    this.element = element;\r\n    this.optionsBuilder = optionsBuilder;\r\n    this.widgetBase = widgetBase\r\n      .control('kendoTreeList')\r\n      .useRootElement(this.element)\r\n      .beforeInitialize(options => this._beforeInitialize(options))\r\n      .linkViewModel(this)\r\n      .useContainer(container);\r\n  }\r\n\r\n  subscribe(event, callback) {\r\n    return this.widgetBase.subscribe(event, callback);\r\n  }\r\n\r\n  bind(ctx, overrideCtx) {\r\n    this.widgetBase.useParentCtx(overrideCtx);\r\n  }\r\n\r\n  attached() {\r\n    let targets = this.element.querySelectorAll('div');\r\n    if (targets.length > 0) {\r\n      this.widgetBase.useElement(targets[0]);\r\n    } else {\r\n      let target = document.createElement('div');\r\n      this.element.appendChild(target);\r\n      this.widgetBase.useElement(target);\r\n    }\r\n\r\n    if (!this.kNoInit) {\r\n      this.recreate();\r\n    }\r\n  }\r\n\r\n  recreate() {\r\n    this.kWidget = this.widgetBase.recreate();\r\n  }\r\n\r\n  _beforeInitialize(options) {\r\n    let columns = this.widgetBase.util.getChildrenVMs(this.element, `${constants.elementPrefix}tree-col`);\r\n    // allow for both column definitions via HTML and via an array of columns\r\n    if (columns && columns.length > 0) {\r\n      options.columns = [];\r\n\r\n      columns.forEach(column => {\r\n        options.columns.push(this.optionsBuilder.getOptions(column, 'TreeListColumn'));\r\n      });\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    this.widgetBase.destroy(this.kWidget);\r\n  }\r\n\r\n  detached() {\r\n    this.destroy();\r\n  }\r\n}\r\n"]}